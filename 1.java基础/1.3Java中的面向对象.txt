本节重点讲面向对象的概念，涉及Java中成员变量，临时变量，常量的概念。
Java中参数的传递，Java中异常。Java中类，抽象类，接口，方法。以及常用的设计模式

一.Java中变量和常量
成员变量：在类中定义的变量
在类中定义，能够在类的方法中调用该变量
当对象初始化时，成员变量初始化，在main方法中，只能通过对象.variable 才可以调用该变量，不能直接调用


临时变量（局部变量）：在方法中定义的变量，只能在该方法中使用，其他方法不能够调用该变量
在方法调用时才创建，方法执行完之后回收。

静态变量（全局变量）：用static修饰的变量，变量如果在方法中，该方法必须是静态方法
静态变量是在类加载的时候创建的，在方法中可以直接使用该变量。其他类中也可以直接通过类名调用。


二.Java中参数传递
Java中参数两种传递形式：基本类型参数传递和对象参数传递
但这只是值的不同形式，在Java中参数传递的方式只有一种-值传递参数

参数是基本类型时：传到方法中的形参是参数值的copy,方法中对形参值进行改变并不影响参数值
形参和实参的地址值是不一样的，相当于新建一个形参，并将实参值赋于形参

参数是对象时：传到方法中的形参对象时，对象的地址值的copy,也就是说形参对象和参数对象指
向同一地址，在方法中对形参进行操作，将影响参数对象值。

三.Java中异常
Java中异常继承同一个抽象类：Throwable
Throwable有两个异常子类，error(错误),Exception(异常)
ereor是程序不能够解决的问题，与代码无关，涉及到虚拟机问题
Exception是程序造成的问题，可以修改代码解决，平时遇到的异常大多是Exception

Exception又可以分为IOException(输入输出异常),RuntimeException(运行时异常）

异常处理：
try-catch:
try {
可能出现异常的执行语句;
} catch (Exception e) {
出现异常后执行语句;
}

try-catch-finally:
不论是否发生异常，都会最后执行finally中的语句；
try {
可能出现异常的语句;
} catch (Exception e) {
出现异常后执行语句;
} finally {
最终执行语句;
}
*当catch中有return/break等跳出try-catch语句的代码时，程序会执行finally之后，返回值或结束;
finally中可以对值进行操作，但catch中return的值是catch中执行的结果。
可以理解为：catch中执行return时，会执行return后面的操作，但并不会立刻返回结果，将结果保存
到一个临时变量中，finally中尽管对变量进行了操作，但是finally之后执行return时，返回的是之
前的临时变量。


四.Java中面向对象
面向对象的概念：
将某个事物或者流程等，与业务相关的属性抽象成具体的对象，与业务无关的信息屏蔽
例如：人抽象成对象的话，可以抽象出 身高，年龄，性别，体重等信息。

类是事物的抽象，将事物的具体属性/业务逻辑封装到一个类中
对象是类的具体事例，通过将类初始化赋值，可以得到具体的对象。

面向对象的三大特性：封装，继承，和多态

封装：将数据和数据的具体操作放到一起，隐藏数据和数据的具体实现，仅提供接口与外界进行数据交换
vo类

继承：继承抽象类 和 实现接口两种方式

抽象类：具有抽象方法的类，叫做抽象类，抽象类必须用abstract修饰，抽象类中也可以有具体的实现方法；
抽象方法：在类中只有方法的定义，没有方法的具体实现，且用abstract修饰的方法，称为抽象方法
抽象方法必须在抽象类中存在。
抽象类在Java中往往作为父类使用，提供统一的方法。因为Java是单继承的，所有抽象类的使用并不多。

接口：用interface修饰的类，类中只定义方法，不写方法的实现，子类通过imprements实现接口，重载接口中的方法


Java中常用的设计模式：
Java中共有23种设计模式，根据不同的作用可以分为四大类：
创建型设计模式：
工厂模式，抽象工厂模式，创建者模式，单例模式，原型模式
设计模式涉及较难，本次课程只简单介绍常用的单例模式

单例模式的原则是只在类中产生一个唯一的对象
实现的方式是不直接通过类创建类的对象，通过类中的静态方法（方法返回自身类的实例），确保类的对象保持唯一

单例模式可以分为懒汉模式和饿汉模式，懒汉模式是指在调用类的静态方法中创建类的对象并返回对象，
饿汉模式是指在类加载的时候就创建类的对象，类的静态方法只需返回对象。
饿汉模式提前创建占内存，但调用速度快，懒汉模式节省内存但临时创建导致调用速度慢。

饿汉模式在多线程中不存在问题，但懒汉模式因为将对象的创建放在方法中导致多线程中可能会多个线程同时调用该方法
也就是说：懒汉模式在多线程中存在问题，因此又产生了改进的懒汉模式。


工厂模式
